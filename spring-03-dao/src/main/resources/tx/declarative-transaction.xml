<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
                           http://www.springframework.org/schema/beans/spring-beans.xsd
                           http://www.springframework.org/schema/context
                           https://www.springframework.org/schema/context/spring-context.xsd
                           http://www.springframework.org/schema/tx
                           https://www.springframework.org/schema/tx/spring-tx.xsd
                           http://www.springframework.org/schema/aop
                           https://www.springframework.org/schema/aop/spring-aop.xsd">


    <bean id="dataSource" class="org.springframework.jdbc.datasource.DriverManagerDataSource" >
        <property name="driverClassName" value="com.mysql.cj.jdbc.Driver"/>
        <property name="url" value="jdbc:mysql://119.45.56.227:3306/testdb?characterEncoding=utf-8"/>
        <property name="username" value="root"/>
        <property name="password" value="123456"/>
    </bean>

    <bean id="jdbcTemplate" class="org.springframework.jdbc.core.JdbcTemplate">
        <property name="dataSource" ref="dataSource" />
    </bean>

    <!-- 包扫描 -->
    <context:component-scan base-package="com.xschen.spring.transaction.c_declarativexml" />
    <!-- 注解驱动 -->
    <context:annotation-config />

    <!-- 基于数据源的事务管理器 -->
    <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="dataSource" />
    </bean>

    <!-- 需要引入 tx 和 aop 名称空间 -->
    <!-- 事务通知标签 -->
    <tx:advice id="transactionAdvice" transaction-manager="transactionManager">
        <tx:attributes>
<!--            <tx:method name="saveAndQuery"/>-->
<!--            <tx:method name="addMoney" />-->
<!--            <tx:method name="subtractMoney" />-->
<!--            <tx:method name="addMoney" isolation="DEFAULT" no-rollback-for="" propagation="" read-only="" rollback-for="" timeout="" />-->
            <!-- isolation 事务隔离级别：默认为Default，即依据数据库默认的事务隔离级别来定 -->
            <!-- timeout 事务超时时间，当事务执行超过指定时间后，事务会停止并回滚。单位为秒，-1代表永不超时 -->
            <!-- rollback-for ：当方法触发指定异常时，事务回滚，需要传入异常类的全限定名。
                                默认值为空，代表捕捉所有 RuntimeException 和 Error 的子类，
                                一般情况下，在日常开发中，我们都会显式声明其为 Exception ，目的是一起捕捉非运行时异常 -->
            <!-- no-rollback-for 当方法触发指定异常时，事务不回滚继续执行，需要传入异常类的全限定名。 -->
            <!-- read-only 设置是否为只读事务。默认值 false ，代表读写型事务。
                                当设置为 true 时，当前事务为只读事务，
                                通常用于查询操作（此时不会有 setAutoCommit(false) 等操作，可以加快查询速度） -->
            <!-- propagation 事务传播行为:
                        1. REQUIRED（默认值）: 如果当前有事务，方法会运行在当前事务中；
                                        如果当前没有事务，则会开启一个新的事务。
                                        （如果有事务，加入到事务中，如果没有，则新起一个事务）

                        2. REQUIRES_NEW： 如果当前没有事务运行，则会开启一个新的事务；
                                       如果当前已经有事务运行，则会将原事务挂起（暂停），重新开启一个新的事务。当新的事务运行完毕后，再将原来的事务释放。
                                       （无论是否有事务，都起一个新的事务）

                        3. SUPPORTS：如果当前有事务，则运行当前的事务中，如果没有事务，也不会创建新的事务。（事务可有可无）

                        4. NOT_SUPPORTED：如果当前有事务，则会将当前事务挂起，如果当前没有事务，那就正好。（不支持事务，按非事务方式运行）

                        5. MANDATORY: 当前方法必须运行在事务中，如果没有，就会抛出异常。

                        6. NEVER: 当前方法不允许运行在事务中，如果当前已经有事务运行，则抛出异常。

                        7. NESTED：如果当前没有事务运行，则开启一个新的事务；
                                   如果当前已经有事务运行，则会记录一个保存点，并继续运行在当前事务中。
                                   如果子事务运行中出现异常，则不会全部回滚，而是回滚到上一个保存点。
                                   （当前有事务就在当前事务里再起一个事务）
                                   -->

            <tx:method name="save*"/> <!-- 所有save开头的方法全部开启事务控制 -->
            <tx:method name="select*"/> <!-- 所有select开头的方法全部开启事务控制 -->
            <tx:method name="*"/> <!-- 任意方法均开启 -->
        </tx:attributes>
    </tx:advice>

    <!--  配置AOP的增强  -->
    <aop:config>
        <aop:advisor advice-ref="transactionAdvice"
                     pointcut="execution(* com.xschen.spring.transaction.c_declarativexml.service.*.*(..))" />
    </aop:config>

    <!-- xml与注解驱动混用: 开启事务的注解驱动， 与@EnableTransactionManagement的一致 -->
    <tx:annotation-driven transaction-manager="transactionManager" />
</beans>